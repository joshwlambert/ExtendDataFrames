[{"path":"https://joshwlambert.github.io/ExtendDataFrames/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ExtendDataFrames authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/articles/Custom-class-and-dplyr-compatibility.html","id":"extending-data-frames-in-r","dir":"Articles","previous_headings":"","what":"Extending Data Frames in R","title":"Custom-class-and-dplyr-compatibility","text":"R commonly used language data science statistical computing. Foundational data structures allow manipulation data minimal effort cognitive load. One commonly required data structures tabular data. can represented R ways, example matrix data frame. data frame (class data.frame) flexible tabular data structure, can hold different data types (e.g. numbers, character strings, etc.) across different columns. contrast matrices – arrays dimensions – thus can hold single data type. Data frames can even nested, cells can data frames lists. [INSERT CODE EXAMPLE NESTED DF ] therefore clear data frames prevalent. However, without limitations. relatively basic printing method can fload R console number columns rows large. useful methods (e.g., summary() str()), might appropriate certain types tabular data. cases useful utilise R’s inheritance mechanisms (specifically S3 inheritance) write extensions R’s data.frame class. case data frame superclass new subclass extends inherits methods (see Adv R1 details S3 inheritance). One common extension data frame tibble {tibble} R package. Outlined {tibble}‘s ’Tibbles’ vignette2, tibbles offer improvements printing, subsetting recycling rules. Another commonly used data frame extension data.table class {data.table} R package 3. class primarily designed improve performance (.e. speed efficiency operations storage) working tabular data R. process developing R software (likely R package), new tabular data class builds atop data frames can become beneficial. blog post two main sections: 1) brief overview steps required setup class extends data frames 2) guide technical aspects class invariants design implementation decisions, tidyverse compatibility","code":"# data frame can hold heterogeneous data types across different columns data.frame(a = c(1, 2, 3), b = c(4, 5, 6), c = c(\"a\", \"b\", \"c\")) #>   a b c #> 1 1 4 a #> 2 2 5 b #> 3 3 6 c  # each column must be of the same type df <- data.frame(a = c(1, 2, 3), b = c(\"4\", 5, 6)) # be careful of the silent type conversion df$a #> [1] 1 2 3 df$b #> [1] \"4\" \"5\" \"6\"  mat <- matrix(1:9, nrow = 3, ncol = 3) mat #>      [,1] [,2] [,3] #> [1,]    1    4    7 #> [2,]    2    5    8 #> [3,]    3    6    9 mat[1, 1] <- \"1\" # be careful of the silent type conversion mat #>      [,1] [,2] [,3] #> [1,] \"1\"  \"4\"  \"7\"  #> [2,] \"2\"  \"5\"  \"8\"  #> [3,] \"3\"  \"6\"  \"9\""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/articles/Custom-class-and-dplyr-compatibility.html","id":"writing-custom-data-class","dir":"Articles","previous_headings":"Extending Data Frames in R","what":"Writing custom data class","title":"Custom-class-and-dplyr-compatibility","text":"useful write class constructor function can called create object new class. functions define redacted version (readability) functions also defined package. ’s ’s needed create subclass data frame. However, although ’ve created class haven’t given functionality thus identical data frame due inheritance. can now write many methods want. show two methods, one require writing generic second . Useful resources “Writing custom data class” section: extending tibbles functionality","code":"birthdays <- function(x) {     # the vector of classes is required for it to inherit from `data.frame`   structure(x, class = c(\"birthdays\", \"data.frame\")) } print.birthdays <- function(x, ...) {   cat(     sprintf(       \"A `birthdays` object with %s rows and %s cols\",       dim(x)[1], dim(x)[2]     )   )   invisible(x) }  birthdays_per_month <- function(x, ...) {   UseMethod(\"birthdays_per_month\") }  birthdays_per_month.birthdays <- function(x, ...) {   out <- table(lubridate::month(x$birthday))   months <- c(     \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",     \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"   )   names(out) <- months[as.numeric(names(out))]   return(out) }"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/articles/Custom-class-and-dplyr-compatibility.html","id":"design-decision-around-class-invariants","dir":"Articles","previous_headings":"Extending Data Frames in R","what":"Design decision around class invariants","title":"Custom-class-and-dplyr-compatibility","text":"Moving onto second section post, discuss design choices creating using S3 classes R. Class invariants members class define . words, without elements class fulfil basic definition. therefore sensible make sure class contains elements times (least operations applied class). cases class object contains invariants normal service can continued. However, case invariant missing modified non-conformist type (e.g. date converted numer) decision made. Either code can error, hopefully giving user informative message modification broke object; alternatively, subclass can revoke superclass can returned. almost cases superclass (.e. base class inherited ) general won’t class invariant restrictions. example class, birthdays, invariants column called name must contain characters, column called birthday must contain dates. order rows columns considered invariant property, extra columns names data types also allowed. number rows also invariant can many birthdays like data object. present cases considerations technical details options. ’ll demonstrate cases subset function R (subsetting uses single square bracket tabular data, [). First fail--subsetting. write subsetting function useful function checks object class valid, -called validator function. return error class valid (defined terms class’ invariants). Now can show error one invariants removed subsetting.","code":"validate_birthdays <- function(x) {   stopifnot(     \"`birthdays` object must be of type `birthdays`\" =       identical(inherits(x, \"birthdays\", which = TRUE), 1L),     \"`birthdays` object should inherit from data.frames\" =       identical(inherits(x, \"data.frame\", which = TRUE), 2L),     \"input must contain 'name' and 'birthday' columns\" =       all(c(\"name\", \"birthday\") %in% colnames(x)),     \"names must be a character\" =       is.character(x$name),     \"birthday must be a date\" =       lubridate::is.Date(x$birthday)   )   invisible(x) } `[.birthdays` <- function(x) {   validate_birthdays(NextMethod()) }  birthdays[, -1]     Error in validate_birthdays(NextMethod()) :     input must contain 'name' and 'birthday' columns"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua W. Lambert. Author, maintainer, copyright holder.","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lambert J (2023). ExtendDataFrames: Explains extend data frame class R. R package version 0.1.0, https://joshwlambert.github.io/ExtendDataFrames/.","code":"@Manual{,   title = {ExtendDataFrames: Explains how to extend the data frame class in R},   author = {Joshua W. Lambert},   year = {2023},   note = {R package version 0.1.0},   url = {https://joshwlambert.github.io/ExtendDataFrames/}, }"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/index.html","id":"extenddataframes","dir":"","previous_headings":"","what":"Explains how to extend the data frame class in R","title":"Explains how to extend the data frame class in R","text":"goal ExtendDataFrames demonstrate extend data frames class R order make bespoke tabular data structure.","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Explains how to extend the data frame class in R","text":"can install development version ExtendDataFrames GitHub :","code":"# install.packages(\"pak\") pak::pak(\"joshwlambert/ExtendDataFrames\")"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/ExtendDataFrames-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ExtendDataFrames: Explains how to extend the data frame class in R — ExtendDataFrames-package","title":"ExtendDataFrames: Explains how to extend the data frame class in R — ExtendDataFrames-package","text":"package acts demonstration extend data frame class R, make compatible dplyr functions.","code":""},{"path":[]},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/ExtendDataFrames-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ExtendDataFrames: Explains how to extend the data frame class in R — ExtendDataFrames-package","text":"Maintainer: Joshua W. Lambert joshua.lambert@lshtm.ac.uk (ORCID) [copyright holder]","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthday_paradox.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates any matching birthdays in the data and the probability of having a\nmatching birthday (i.e. birthday paradox) — birthday_paradox","title":"Calculates any matching birthdays in the data and the probability of having a\nmatching birthday (i.e. birthday paradox) — birthday_paradox","text":"Calculates matching birthdays data probability matching birthday (.e. birthday paradox)","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthday_paradox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates any matching birthdays in the data and the probability of having a\nmatching birthday (i.e. birthday paradox) — birthday_paradox","text":"","code":"birthday_paradox(x, ...)  # S3 method for birthdays birthday_paradox(x, ...)"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthday_paradox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates any matching birthdays in the data and the probability of having a\nmatching birthday (i.e. birthday paradox) — birthday_paradox","text":"x `birthdays` object ... Arguments passed methods","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthday_paradox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates any matching birthdays in the data and the probability of having a\nmatching birthday (i.e. birthday paradox) — birthday_paradox","text":"named numeric vector two elements","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthday_paradox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates any matching birthdays in the data and the probability of having a\nmatching birthday (i.e. birthday paradox) — birthday_paradox","text":"","code":"df <- data.frame(   name = c(\"kevin\", \"stacey\"),   birthday = c(as.Date(\"2001-01-01\"), as.Date(\"2002-01-02\")) ) birthdays <- birthdays(df) birthday_paradox(birthdays) #>   num_coincidence prob_coincindence  #>       0.000000000       0.002739726"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for creating a subclass of `<data.frame>` called `<birthdays>` — birthdays","title":"Constructor for creating a subclass of `<data.frame>` called `<birthdays>` — birthdays","text":"Constructor creating subclass `<data.frame>` called `<birthdays>`","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for creating a subclass of `<data.frame>` called `<birthdays>` — birthdays","text":"","code":"birthdays(x)"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for creating a subclass of `<data.frame>` called `<birthdays>` — birthdays","text":"x `data.frame`","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for creating a subclass of `<data.frame>` called `<birthdays>` — birthdays","text":"`birthdays` object","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for creating a subclass of `<data.frame>` called `<birthdays>` — birthdays","text":"","code":"df = data.frame(   name = c(\"kevin\", \"stacey\"),   birthday = c(as.Date(\"2001-01-01\"), as.Date(\"2002-01-02\")) ) birthdays(df) #> A `birthdays` object with 2 rows and 2 cols   # generate large randomised `<birthdays>` objects  df <- data.frame(   name = randomNames::randomNames(10),   birthday = sample(     x = seq.Date(       from = as.Date(\"2020-01-01\"),       to = as.Date(\"2022-01-01\"),       by = 1),     size = 10   ) ) birthdays <- birthdays(df)"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_can_reconstruct.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether the `<birthdays>` object is valid — birthdays_can_reconstruct","title":"Checks whether the `<birthdays>` object is valid — birthdays_can_reconstruct","text":"wrapper [`validate_birthdays] [`tryCatch()`] order error input object invalid returns `TRUE` `FALSE` object valid. object valid can \"reconstructed\" downgraded `data.frame`.","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_can_reconstruct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether the `<birthdays>` object is valid — birthdays_can_reconstruct","text":"","code":"birthdays_can_reconstruct(x)"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_can_reconstruct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether the `<birthdays>` object is valid — birthdays_can_reconstruct","text":"x `data.frame` subclass `data.frame` (e.g. `tibble` `birthdays`)","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_can_reconstruct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether the `<birthdays>` object is valid — birthdays_can_reconstruct","text":"boolean logical (`TRUE` `FALSE`)","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_per_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Count number of birthdays per month in each year from a `<birthdays>` object — birthdays_per_month","title":"Count number of birthdays per month in each year from a `<birthdays>` object — birthdays_per_month","text":"Count number birthdays per month year `<birthdays>` object","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_per_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count number of birthdays per month in each year from a `<birthdays>` object — birthdays_per_month","text":"","code":"birthdays_per_month(x, ...)  # S3 method for birthdays birthdays_per_month(x, ...)"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_per_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count number of birthdays per month in each year from a `<birthdays>` object — birthdays_per_month","text":"x `birthdays` object ... Arguments passed ","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_per_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count number of birthdays per month in each year from a `<birthdays>` object — birthdays_per_month","text":"`birthdays` object","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_per_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count number of birthdays per month in each year from a `<birthdays>` object — birthdays_per_month","text":"","code":"df = data.frame(   name = c(\"kevin\", \"stacey\"),   birthday = c(as.Date(\"2001-01-01\"), as.Date(\"2002-01-02\")) ) birthdays <- birthdays(df) birthdays_per_month(birthdays) #> Jan  #>   2"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_reconstruct.html","id":null,"dir":"Reference","previous_headings":"","what":"Decides whether `<birthdays>` object can be reconstructed from input — birthdays_reconstruct","title":"Decides whether `<birthdays>` object can be reconstructed from input — birthdays_reconstruct","text":"Uses [`birthdays_can_reconstruct()`] determine whether data input can reconstructed valid `<birthdays>` object. can , returned `data.frame`.","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_reconstruct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decides whether `<birthdays>` object can be reconstructed from input — birthdays_reconstruct","text":"","code":"birthdays_reconstruct(x, to)"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_reconstruct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decides whether `<birthdays>` object can be reconstructed from input — birthdays_reconstruct","text":"x `data.frame` subclass `data.frame` (e.g. `tibble` `birthdays`) reference object, case `birthdays` object","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/birthdays_reconstruct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decides whether `<birthdays>` object can be reconstructed from input — birthdays_reconstruct","text":"`birthdays` object (input valid) `data.frame`","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/cash-set-.birthdays.html","id":null,"dir":"Reference","previous_headings":"","what":"Set accessor for `<birthdays>` class — $<-.birthdays","title":"Set accessor for `<birthdays>` class — $<-.birthdays","text":"Set accessor `<birthdays>` class","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/cash-set-.birthdays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set accessor for `<birthdays>` class — $<-.birthdays","text":"","code":"# S3 method for birthdays $(x, name) <- value"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/cash-set-.birthdays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set accessor for `<birthdays>` class — $<-.birthdays","text":"x `birthdays` object name literal character string name (possibly backtick     quoted).  extraction, normally (see     ‘Environments’) partially matched names     object. value typically array-like R object similar class     x.","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/cash-set-.birthdays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set accessor for `<birthdays>` class — $<-.birthdays","text":"`birthdays` object `data.frame`","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/df_reconstruct.html","id":null,"dir":"Reference","previous_headings":"","what":"Transplants the attributes of one input (`to`) to the other input (`x`) — df_reconstruct","title":"Transplants the attributes of one input (`to`) to the other input (`x`) — df_reconstruct","text":"Transplants attributes one input (``) input (`x`)","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/df_reconstruct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transplants the attributes of one input (`to`) to the other input (`x`) — df_reconstruct","text":"","code":"df_reconstruct(x, to)"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/df_reconstruct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transplants the attributes of one input (`to`) to the other input (`x`) — df_reconstruct","text":"x `data.frame` subclass `data.frame` (e.g. `tibble` `birthdays`) reference object, case `birthdays` object","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/df_reconstruct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transplants the attributes of one input (`to`) to the other input (`x`) — df_reconstruct","text":"`birthdays` object","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/names-set-.birthdays.html","id":null,"dir":"Reference","previous_headings":"","what":"Set names on `<birthdays>` class — names<-.birthdays","title":"Set names on `<birthdays>` class — names<-.birthdays","text":"modifying names invalidates `<birthdays>` object subsetting return data frame attributes class preserved.","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/names-set-.birthdays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set names on `<birthdays>` class — names<-.birthdays","text":"","code":"# S3 method for birthdays names(x) <- value"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/names-set-.birthdays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set names on `<birthdays>` class — names<-.birthdays","text":"x R object. value character vector length x,     NULL.","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/names-set-.birthdays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set names on `<birthdays>` class — names<-.birthdays","text":"`<birthdays>` object `data.frame`","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/print.birthdays.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for `<birthdays>` — print.birthdays","title":"Print method for `<birthdays>` — print.birthdays","text":"Print method `<birthdays>`","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/print.birthdays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for `<birthdays>` — print.birthdays","text":"","code":"# S3 method for birthdays print(x, ...)"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/print.birthdays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for `<birthdays>` — print.birthdays","text":"x `birthdays` object ... arugments passed `print()`","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/print.birthdays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for `<birthdays>` — print.birthdays","text":"Invisibly returns input, called printing side-effects","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/print.birthdays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for `<birthdays>` — print.birthdays","text":"","code":"df = data.frame(   name = c(\"kevin\", \"stacey\"),   birthday = c(as.Date(\"2001-01-01\"), as.Date(\"2002-01-02\")) ) birthdays <- birthdays(df) print(birthdays) #> A `birthdays` object with 2 rows and 2 cols"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/sub-.birthdays.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset function for `<birthdays>` with downgrade-on-subsetting — [.birthdays","title":"Subset function for `<birthdays>` with downgrade-on-subsetting — [.birthdays","text":"subsetting invalidates class `<data.frame>` returned.","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/sub-.birthdays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset function for `<birthdays>` with downgrade-on-subsetting — [.birthdays","text":"","code":"# S3 method for birthdays [(x, ...)"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/sub-.birthdays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset function for `<birthdays>` with downgrade-on-subsetting — [.birthdays","text":"x `birthdays` object ... arguments passed methods.","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/sub-.birthdays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset function for `<birthdays>` with downgrade-on-subsetting — [.birthdays","text":"Either `birthdays` object `data.frame`","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/validate_birthdays.html","id":null,"dir":"Reference","previous_headings":"","what":"Class validator for `<birthdays>` — validate_birthdays","title":"Class validator for `<birthdays>` — validate_birthdays","text":"Class validator `<birthdays>`","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/validate_birthdays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class validator for `<birthdays>` — validate_birthdays","text":"","code":"validate_birthdays(x)"},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/validate_birthdays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class validator for `<birthdays>` — validate_birthdays","text":"x `birthdays` object","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/validate_birthdays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class validator for `<birthdays>` — validate_birthdays","text":"Returns input invisibly, using validation side-effects.","code":""},{"path":"https://joshwlambert.github.io/ExtendDataFrames/reference/validate_birthdays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class validator for `<birthdays>` — validate_birthdays","text":"","code":"df = data.frame(   name = c(\"kevin\", \"stacey\"),   birthday = c(as.Date(\"2001-01-01\"), as.Date(\"2002-01-02\")) ) birthdays <- birthdays(df) validate_birthdays(birthdays)"}]
